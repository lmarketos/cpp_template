#!/usr/bin/env python3

import argparse
import subprocess

custom_docker = "lmarketos/cpp:0.1"
custom_dockerfile = "CustomDockerfile"
core_docker = "lmarketos/cpp-core:0.1"
docker_args = "-w ${PWD} --rm --name=build --mount type=bind,source=${PWD},target=${PWD} --user $(id -u):$(id -g) --volume /etc/passwd:/etc/passwd:ro --volume /etc/group:/etc/group:ro --env \"TERM=xterm-256color\"" 
docker_user = "--user \"$(id -u):$(id -g)\""
docker_shell_no_user = "docker run -a stdout -a stderr " + docker_args
docker_shell =  docker_shell_no_user + " " + docker_user

make_command = "make && make install\""
compiler = "g++"
compile_command = "/bin/bash -c \"mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=.. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_STANDARD=23 -DCMAKE_CXX_FLAGS=\"-O3\" -DCMAKE_CXX_COMPILER="

def run(cmd):
    print(cmd)
    subprocess.run(cmd, shell=True,check=False,executable='/bin/bash')

def run_docker(cmd):
    run(docker_shell + " " + " ".join(str(x) for x in custom_command))

def test(cmd):
    command = "/bin/bash -c \"cd build && ctest\""
    run_docker(command)

def tidy(cmd):
    command = "/bin/bash -c \"cd build && run-clang-tidy -checks='*,-llvm*,-modernize-use-trailing-return-type' -header-filter=.*\""
    run_docker(command)

def cppcheck(cmd):
    command = "cppcheck --project=build/compile_commands.json --inline-suppr --enable=all --suppress=missingIncludeSystem"
    run_docker(command)

def build_clang(args):
    command = compile_command + "clang++ && " + make_command
    run_docker(command)

def build_gpp(args):
    command = compile_command + "g++ && " + make_command
    run_docker(command)

def build(args):
    command = compile_command + compiler + " && " + make_command
    run_docker(command)

def build_docker(args):
    command = "pwd && docker build -t " + core_docker + " -f ./docker/Dockerfile ."
    run(command)

def build_custom_docker(args):
    command = "pwd && docker build -t " + custom_docker + " -f ./docker/CustomDockerfile ."
    run(command)

def shell(args):
    command = " docker run -it " + docker_args + " " + custom_docker + " bash"
    run(command)

def clean(args):
    command = "rm -rf build && rm -rf bin"
    run(command)

def set_gpp(args):
    compiler = "g++"

def set_clang(args):
    compiler = "clang++"

def main() :
    parser = argparse.ArgumentParser(add_help=True, description='Execute various dev related commands.')

    sp = parser.add_subparsers(dest='command', help='Command')

    sp_build_docker = sp.add_parser('build_docker', help='Build the cpp core docker image')
    sp_build_docker.set_defaults(func=build_docker)

    sp_build_custom_docker = sp.add_parser('build_custom_docker', help='Build the cpp custom docker image')
    sp_build_custom_docker.set_defaults(func=build_custom_docker)

    sp_build = sp.add_parser('build', help='Build all executables in the project using ' + compiler)
    sp_build.set_defaults(func=build)

    sp_build_gpp = sp.add_parser('build_g++', help='Build all executables in the project using g++')
    sp_build_gpp.set_defaults(func=build_gpp)

    sp_build_clang = sp.add_parser('build_clang', help='Build all executables in the project using clang++')
    sp_build_clang.set_defaults(func=build_clang)

    sp_cppcheck = sp.add_parser('cppcheck', help='Run cppcheck on the project')
    sp_cppcheck.set_defaults(func=cppcheck)

    sp_tidy = sp.add_parser('tidy', help='Run clang-tidy on the project')
    sp_tidy.set_defaults(func=tidy)

    sp_clean = sp.add_parser('clean', help='Remove the build and bin directories')
    sp_clean.set_defaults(func=clean)

#    sp_clang = sp.add_parser('compiler-clang++', help='Set clang++ as the compiler. Current is ' + compiler)
#    sp_clang.set_defaults(func=set_clang)

#    sp_gpp = sp.add_parser('compiler-g++', help='Set g++ as the compiler. Current is ' + compiler)
#    sp_gpp.set_defaults(func=set_gpp)

    sp_shell = sp.add_parser('shell', help='Open interactive bash shell in the build docker')
    sp_shell.set_defaults(func=shell)

    sp_test = sp.add_parser('test', help='Run the unit tests for the project')
    sp_test.set_defaults(func=test)

    sp_run = sp.add_parser('run', help='Run a command inside the docker')
    sp_run.set_defaults(func=run_docker)

    global custom_command
    sp_run.add_argument('command', nargs=1, help='Command to run in docker')

    global custom_docker
    parser.add_argument('docker', nargs='?', help='Optional target docker to use; default is ' + custom_docker)

    args = parser.parse_args()

    if args.docker:
        custom_docker = args.docker

    if args.command:
        custom_command = args.command

    print("command: " + " ".join(str(x) for x in custom_command))

    global docker_shell
    docker_shell = docker_shell + " " + custom_docker

    args.func(args)


if __name__ == "__main__":
    main()
